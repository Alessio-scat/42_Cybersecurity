#!/usr/bin/env python3

import argparse
import re
import hashlib
import hmac
import struct
import os


def create_ft_opt_key(key):
    with open("ft_otp.key", 'w') as f:
        f.write(key)

# encrypt with sha256
def encrypt_string(hash_string):
    sha_signature = \
        hashlib.sha256(hash_string.encode()).hexdigest()
    return sha_signature

def verif_key(key):

    content = key.strip()

    try:
        with open(key, 'r') as file:
            content = file.read().strip()
    except FileNotFoundError:
        pass

    pattern = re.compile(r'^[0-9a-fA-F]{64,}$') # check the 64 characters => pattern object
    if pattern.fullmatch(content): # check if the string match with pattern
        sha256_content = encrypt_string(content)
        create_ft_opt_key(sha256_content)
        print("Key was successfully saved in ft_otp.key.")
    else:
        print("/ft_otp: error: key must be 64 hexadecimal characters")

if __name__ == '__main__' :

    parser = argparse.ArgumentParser(
                    prog='ft_otp',
                    description='program that allows you to store an initial password in file, and that is capable of generating a new one time password every time it is requested.',
                    epilog='42 Cybersecurity')

    parser.add_argument('-g' , type=str, help='Generate and store key')
    parser.add_argument('-k' , type=str, help='Generate OTP based on key')
    args = parser.parse_args()

    if args.g is None and args.k is None :
        print("Usage: ./ft_opt -g key or ./ft_opt -k ft_opt.key")
    elif args.g:
        verif_key(args.g)
    
    # print(args)